const dayjs = require("dayjs");
const Job = require("../models/Job");
const Company = require("../models/Company");
const User = require("../models/User");
const { getTfidfScore, getJobDescriptionById, getTfidfScoreRecruiter, extractMainJobTitle, preprocess } = require("../utils/tfidf");
const Application = require("../models/Application");
const SaveJob = require("../models/SaveJob");

const {
  WORK_TYPE_MAP,
  SALARY_RANGE_MAP,
  INDUSTRY_MAP,
  EXPERIENCE_MAP,
  EDUCATION_MAP,
  WORK_LEVEL_MAP,
} = require("../utils/fieldDisplayMap"); // ƒë∆∞·ªùng d·∫´n ƒë√∫ng t√πy theo d·ª± √°n

// Create a new job
const createJob = async (req, res) => {
  try {
    console.log("req.body: ", req.body);
    const {
      title,
      required_skills,
      specialize,
      salary_range,
      salary_type,
      deadline,
      work_type,
      work_location,
      work_schedule,
      description,
      vacancies,
      candidate_required,
      experience_required,
      educational_level,
      work_level,
      benefits,
      recruiter_id,
      company_id,
    } = req.body;
    // Chuy·ªÉn ƒë·ªïi deadline sang ki·ªÉu DATE
    const formattedDeadline = dayjs(deadline, "YYYY-MM-DD").toDate();
    try {
      const newJob = await Job.create({
        title,
        required_skills,
        specialize: INDUSTRY_MAP[specialize] || specialize,
        salary_range: SALARY_RANGE_MAP[salary_range] || salary_range,
        salary_type,
        deadline: formattedDeadline, // L∆∞u v√†o DB
        work_type: WORK_TYPE_MAP[work_type] || work_type,
        work_location,
        work_schedule,
        description,
        vacancies,
        candidate_required,
        experience_required:
          EXPERIENCE_MAP[experience_required] || experience_required,
        educational_level:
          EDUCATION_MAP[educational_level] || educational_level,
        work_level: WORK_LEVEL_MAP[work_level] || work_level,
        benefits,
        approval_status: "Pending", // Tr·∫°ng th√°i ph√™ duy·ªát m·∫∑c ƒë·ªãnh l√† "pending"
        recruiter_id,
        company_id,
      });
      res.status(201).json({
        message: "Th√™m b√†i ƒëƒÉng th√†nh c√¥ng, ch·ªù admin duy·ªát!",
        job: newJob,
      });
    } catch (dbError) {
      console.error("L·ªói khi th√™m v√†o CSDL: ", dbError);
      res.status(500).json({
        message: "L·ªói khi th√™m b√†i ƒëƒÉng v√†o CSDL!",
        error: dbError.message,
      });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
    console.log("L·ªói Server: ", error);
  }
};

// Update a job
const updateJob = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      title,
      required_skills,
      industry,
      salary_range,
      salary_type,
      deadline,
      work_location,
      work_schedule,
      work_type,
      description,
      vacancies,
      benefits,
      candidate_required,
      education,
      experience_required,
      position,
    } = req.body;

    // Chuy·ªÉn ƒë·ªïi deadline sang ki·ªÉu Date (n·∫øu c√≥)
    const formattedDeadline = deadline
      ? dayjs(deadline, "YYYY-MM-DD").toDate()
      : undefined;

    // N·∫øu work_type l√† m·∫£ng, l·∫•y gi√° tr·ªã ƒë·∫ßu ti√™n
    const formattedWorkType = Array.isArray(work_type)
      ? work_type[0]
      : work_type;

    // T·∫°o object ch·ª©a c√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t
    const updatedFields = {
      title,
      required_skills,
      industry,
      salary_range,
      salary_type,
      deadline: formattedDeadline,
      work_type: formattedWorkType,
      work_location,
      work_schedule,
      description,
      vacancies,
      benefits,
      candidate_required,
      educational_level: education,
      experience_required,
      work_level: position,
    };

    // Xo√° c√°c field undefined ƒë·ªÉ tr√°nh ghi ƒë√® gi√° tr·ªã c≈© b·∫±ng undefined
    Object.keys(updatedFields).forEach(
      (key) => updatedFields[key] === undefined && delete updatedFields[key]
    );

    // T√¨m v√† c·∫≠p nh·∫≠t job
    const updatedJob = await Job.findByPk(id);
    if (!updatedJob) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng!" });
    }

    await updatedJob.update(updatedFields);
    res
      .status(200)
      .json({ message: "C·∫≠p nh·∫≠t b√†i ƒëƒÉng th√†nh c√¥ng!", job: updatedJob });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t b√†i ƒëƒÉng: ", error);
    res.status(500).json({ message: "L·ªói Server!", error: error.message });
  }
};

// Get all jobs by recruiter_id
const getAllJobsByRecruiter = async (req, res) => {
  try {
    const { recruiter_id } = req.params; // L·∫•y recruiter_id t·ª´ URL
    const jobs = await Job.findAll({ where: { recruiter_id } });

    if (!jobs.length) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ b√†i ƒëƒÉng n√†o" });
    }

    res.status(200).json(jobs);
  } catch (error) {
    res.status(500).json({ message: "L·ªói Server", error: error.message });
  }
};

const getAllJobsByCandidate = async (req, res) => {
  try {
    const userId = req.user?.id; // C√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    console.log("üë§ Th√¥ng tin user:", req.user);
    console.log("üìå userId:", userId);

    // 1. L·∫•y t·∫•t c·∫£ c√¥ng vi·ªác ƒë√£ duy·ªát (status = "ƒë√£ duy·ªát")
    const jobs = await Job.findAll({
      where: {
        approval_status: "Approved", // L·ªçc c√¥ng vi·ªác ƒë√£ duy·ªát b·∫±ng ti·∫øng Vi·ªát
      },
      include: [
        {
          model: Company,
          as: "company",
          attributes: ["name", "logo"],
        },
        {
          model: User,
          as: "recruiter",
          attributes: ["full_name"],
        },
      ],
      order: [["createdAt", "DESC"]],
    });

    console.log("‚úÖ T·ªîNG S·ªê C√îNG VI·ªÜC ƒê√É DUY·ªÜT T·ª™ DB:", jobs.length);

    let sortedJobs = jobs;

    // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p th√¨ m·ªõi t√≠nh TF-IDF
    if (userId) {
      // 2. L·∫•y c√°c c√¥ng vi·ªác m√† ng∆∞·ªùi d√πng ƒë√£ ·ª©ng tuy·ªÉn ho·∫∑c l∆∞u
      const savedJobs = await SaveJob.findAll({
        where: { candidate_id: userId },
        attributes: ["job_id"],
      });

      const appliedAndSavedJobIds = [
        ...new Set([...savedJobs.map((job) => job.job_id)]),
      ];

      console.log(
        "‚úÖ Job ƒë√£ l∆∞u:",
        savedJobs.map((j) => j.job_id)
      );
      console.log("‚úÖ T·ªïng h·ª£p jobId ƒë√£ l∆∞u/·ª©ng tuy·ªÉn:", appliedAndSavedJobIds);

      // 3. T√≠nh ƒëi·ªÉm TF-IDF cho t·∫•t c·∫£ c√¥ng vi·ªác
      const jobScores = await Promise.all(
        jobs.map(async (job) => {
          const jobText = [job.title, job.description]
            .filter(Boolean)
            .join(" ");
          const tfidfScore = await getTfidfScore(
            jobText,
            appliedAndSavedJobIds
          );

          return {
            job,
            score: tfidfScore,
          };
        })
      );

      console.log(
        "‚úÖ ƒêi·ªÉm TF-IDF t·ª´ng c√¥ng vi·ªác:",
        jobScores.map((j) => ({
          jobId: j.job.id,
          title: j.job.title,
          score: j.score,
        }))
      );

      // 4. S·∫Øp x·∫øp c√¥ng vi·ªác theo ƒëi·ªÉm TF-IDF
      sortedJobs = jobScores
        .sort((a, b) => b.score - a.score)
        .map((jobScore) => jobScore.job);

      console.log(
        "‚úÖ Job c√≥ ƒëi·ªÉm TF-IDF cao nh·∫•t:",
        jobScores.sort((a, b) => b.score - a.score)[0]
      );
    }

    // 5. ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu c√¥ng vi·ªác
    const formattedJobs = sortedJobs.map((job) => ({
      id: job.id,
      title: job.title,
      description: job.description,
      status: job.status,
      experience_required: job.experience_required || "",
      salary_range: job.salary_range,
      work_location: job.work_location,
      created_at: job.createdAt,
      updated_at: job.updatedAt,
      company_name: job.company ? job.company.name : "Kh√¥ng r√µ",
      recruiter_name: job.recruiter ? job.recruiter.full_name : "Kh√¥ng r√µ",
      company_logo: job.company ? job.company.logo : "",
      company_id: job.company_id,
      recruiter_id: job.recruiter_id,
      required_skills: job.required_skills,
      industry: job.industry,
      salary_type: job.salary_type,
      deadline: job.deadline,
      work_type: job.work_type,
      work_schedule: job.work_schedule,
      vacancies: job.vacancies,
      benefits: job.benefits,
      educational_level: job.educational_level,
      work_level: job.work_level,
      candidate_required: job.candidate_required,
    }));

    // 6. Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp v√† ƒë·ªãnh d·∫°ng
    res.status(200).json(formattedJobs);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y job:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

const getJobDetailByCandidate = async (req, res) => {
  try {
    const { id } = req.params;
    const job = await Job.findOne({
      where: { id },
      include: [
        {
          model: Company,
          as: "company",
          attributes: ["name", "logo"],
        },
        {
          model: User,
          as: "recruiter",
          attributes: ["full_name"],
        },
      ],
    });

    if (!job) {
      return res.status(404).json({ message: "Job not found" });
    }

    const formattedJob = {
      id: job.id,
      title: job.title,
      description: job.description,
      status: job.status,
      experience_required: job.experience_required || "",
      salary_range: job.salary_range,
      work_location: job.work_location,
      created_at: job.createdAt,
      updated_at: job.updatedAt,
      company_name: job.company ? job.company.name : "Kh√¥ng r√µ", // L·∫•y t√™n c√¥ng ty n·∫øu c√≥
      recruiter_name: job.recruiter ? job.recruiter.full_name : "Kh√¥ng r√µ", // L·∫•y t√™n ng∆∞·ªùi tuy·ªÉn d·ª•ng n·∫øu c√≥
      company_logo: job.company ? job.company.logo : "",
      company_id: job.company_id,
      recruiter_id: job.recruiter_id,
      required_skills: job.required_skills,
      specialize: job.specialize,
      salary_type: job.salary_type,
      deadline: job.deadline,
      work_type: job.work_type,
      work_schedule: job.work_schedule,
      vacancies: job.vacancies,
      benefits: job.benefits,
      educational_level: job.educational_level,
      work_level: job.work_level,
      candidate_required: job.candidate_required,
    };

    res.status(200).json(formattedJob);
  } catch (error) {
    console.error("Error fetching job detail:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

const getJobsByAdmin = async (req, res) => {
  try {
    // L·∫•y approval_status t·ª´ query parameter (b·ªè qua status)
    const { approval_status } = req.query;
    let whereClause = {};

    // N·∫øu c√≥ approval_status trong query, th√™m v√†o whereClause
    if (approval_status) {
      whereClause.approval_status = approval_status; // L·ªçc theo approval_status
    }

    // 1. L·∫•y c√¥ng vi·ªác d·ª±a tr√™n approval_status
    const jobs = await Job.findAll({
      where: whereClause, // L·ªçc theo approval_status n·∫øu c√≥
      include: [
        {
          model: Company,
          as: "company",
          attributes: ["name", "logo"],
        },
        {
          model: User,
          as: "recruiter",
          attributes: ["full_name"],
        },
      ],
      order: [["createdAt", "DESC"]],
    });

    // 2. ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu c√¥ng vi·ªác
    const formattedJobs = jobs.map((job) => ({
      id: job.id,
      title: job.title,
      description: job.description,
      approval_status: job.approval_status, // L·∫•y tr·∫°ng th√°i ph√™ duy·ªát
      status: job.status, // L·∫•y tr·∫°ng th√°i c√¥ng vi·ªác
      experience_required: job.experience_required || "",
      salary_range: job.salary_range,
      work_location: job.work_location,
      created_at: job.createdAt,
      updated_at: job.updatedAt,
      company_name: job.company ? job.company.name : "Kh√¥ng r√µ",
      recruiter_name: job.recruiter ? job.recruiter.full_name : "Kh√¥ng r√µ",
      company_logo: job.company ? job.company.logo : "",
      company_id: job.company_id,
      recruiter_id: job.recruiter_id,
      required_skills: job.required_skills,
      specialize: job.specialize,
      salary_type: job.salary_type,
      deadline: job.deadline,
      work_type: job.work_type,
      work_schedule: job.work_schedule,
      vacancies: job.vacancies,
      benefits: job.benefits,
      educational_level: job.educational_level,
      work_level: job.work_level,
      candidate_required: job.candidate_required,
    }));

    // 3. Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√£ ƒë·ªãnh d·∫°ng
    res.status(200).json(formattedJobs);
  } catch (error) {
    console.error("Error fetching jobs for admin:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

const getJobDetailByAdmin = async (req, res) => {
  try {
    const { id } = req.params;
    const job = await Job.findOne({
      where: { id },
      include: [
        {
          model: Company,
          as: "company",
          attributes: ["name", "logo"],
        },
        {
          model: User,
          as: "recruiter",
          attributes: ["full_name"],
        },
      ],
    });

    if (!job) {
      return res.status(404).json({ message: "Job not found" });
    }

    const formattedJob = {
      id: job.id,
      title: job.title,
      description: job.description,
      status: job.status,
      approval_status: job.approval_status,
      experience_required: job.experience_required || "",
      salary_range: job.salary_range,
      work_location: job.work_location,
      created_at: job.createdAt,
      updated_at: job.updatedAt,
      company_name: job.company ? job.company.name : "Kh√¥ng r√µ", // L·∫•y t√™n c√¥ng ty n·∫øu c√≥
      recruiter_name: job.recruiter ? job.recruiter.full_name : "Kh√¥ng r√µ", // L·∫•y t√™n ng∆∞·ªùi tuy·ªÉn d·ª•ng n·∫øu c√≥
      company_logo: job.company ? job.company.logo : "",
      company_id: job.company_id,
      recruiter_id: job.recruiter_id,
      required_skills: job.required_skills,
      specialize: job.specialize,
      salary_type: job.salary_type,
      deadline: job.deadline,
      work_type: job.work_type,
      work_schedule: job.work_schedule,
      vacancies: job.vacancies,
      benefits: job.benefits,
      educational_level: job.educational_level,
      work_level: job.work_level,
      candidate_required: job.candidate_required,
    };

    res.status(200).json(formattedJob);
  } catch (error) {
    console.error("Error fetching job detail:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// H√†m approveJob ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác
const approveJob = async (req, res) => {
  const jobId = req.params.id;

  try {
    // T√¨m c√¥ng vi·ªác theo ID
    const job = await Job.findByPk(jobId);
    if (!job) {
      return res.status(404).json({ message: "Job not found" });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i approval_status t·ª´ Pending sang Approved
    job.approval_status = "Approved";
    await job.save(); // L∆∞u thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu

    res.status(200).json({ message: "Job approved successfully", job });
  } catch (error) {
    console.error("Error approving job:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

const rejectJob = async (req, res) => {
  const jobId = req.params.id;

  try {
    const job = await Job.findByPk(jobId);
    if (!job) {
      return res.status(404).json({ message: "Job not found" });
    }

    job.approval_status = "Rejected";
    await job.save();

    res.status(200).json({ message: "Job rejected successfully", job });
  } catch (error) {
    console.error("Error rejecting job:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

const getRecommendedJobsByCandidate = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ message: "Unauthorized" });

    // L·∫•y t·∫•t c·∫£ c√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c duy·ªát
    const jobs = await Job.findAll({
      where: { approval_status: "Approved" },
      include: [
        { model: Company, as: "company", attributes: ["name", "logo"] },
        { model: User, as: "recruiter", attributes: ["full_name"] },
      ],
      order: [["createdAt", "DESC"]],
    });

    // L·∫•y danh s√°ch c√¥ng vi·ªác ƒë√£ l∆∞u c·ªßa ·ª©ng vi√™n
    const savedJobs = await SaveJob.findAll({
      where: { candidate_id: userId },
      attributes: ["job_id"],
    });
    const savedJobIds = savedJobs.map((j) => j.job_id);

    // N·∫øu ch∆∞a l∆∞u c√¥ng vi·ªác n√†o th√¨ kh√¥ng th·ªÉ g·ª£i √Ω
    if (savedJobIds.length === 0) return res.status(200).json([]);

    // L·ªçc ra c√°c c√¥ng vi·ªác ch∆∞a l∆∞u
    const unsavedJobs = jobs.filter((job) => !savedJobIds.includes(job.id));

    // Chu·∫©n b·ªã m√¥ t·∫£ c√°c c√¥ng vi·ªác ƒë√£ l∆∞u ƒë·ªÉ l√†m "t·∫≠p so s√°nh"
    const savedJobTextsRaw = await Promise.all(
      savedJobIds.map((jobId) => getJobDescriptionById(jobId))
    );
    // Lo·∫°i b·ªè tr√πng l·∫∑p m√¥ t·∫£ ƒë√£ l∆∞u
    const savedJobTexts = [...new Set(savedJobTextsRaw)];

    // L·ªçc tr√πng m√¥ t·∫£ c√¥ng vi·ªác ch∆∞a l∆∞u
    const textMap = new Map();
    const filteredJobs = [];
    for (const job of unsavedJobs) {
      const jobTextRaw = [extractMainJobTitle(job.title), job.description].filter(Boolean).join(" ");
      const jobText = preprocess(jobTextRaw); // Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n tr∆∞·ªõc khi x√©t tr√πng
      if (!textMap.has(jobText)) {
        textMap.set(jobText, true);
        filteredJobs.push({ job, jobText });
      }
    }

    // T√≠nh ƒëi·ªÉm TF-IDF gi·ªØa t·ª´ng c√¥ng vi·ªác ch∆∞a l∆∞u v·ªõi c√°c c√¥ng vi·ªác ƒë√£ l∆∞u
    const jobScores = await Promise.all(
      filteredJobs.map(async ({ job, jobText }) => {
        const tfidfScore = getTfidfScoreRecruiter(jobText, savedJobTexts);
        return { job, score: tfidfScore };
      })
    );

    // L·ªçc tr√πng theo ID ƒë·ªÅ ph√≤ng tr√πng job (c√≥ th·ªÉ kh√¥ng c·∫ßn nh∆∞ng an to√†n)
    const uniqueJobScores = [...new Map(
      jobScores.filter(Boolean).map(item => [item.job.id, item])
    ).values()];

    // Debug log ƒëi·ªÉm TF-IDF
    uniqueJobScores.forEach(item => {
      if (item) console.log(`‚úÖ ${item.job.title} - TFIDF Score: ${item.score}`);
    });

    // L·ªçc ra c√°c c√¥ng vi·ªác c√≥ ƒëi·ªÉm cao, s·∫Øp x·∫øp theo ƒëi·ªÉm gi·∫£m d·∫ßn v√† l·∫•y t·ªëi ƒëa 10 k·∫øt qu·∫£
    const recommendedJobs = uniqueJobScores
      .filter((item) => item.score >= 2.4)
      .sort((a, b) => b.score - a.score)
      .slice(0, 10)
      .map((item) => item.job);

    // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ
    const formattedJobs = recommendedJobs.map((job) => ({
      id: job.id,
      title: job.title,
      description: job.description,
      salary_range: job.salary_range,
      work_location: job.work_location,
      deadline: job.deadline,
      company: job.company,
      recruiter: job.recruiter,
    }));

    return res.status(200).json(formattedJobs);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y recommended jobs:", error);
    return res.status(500).json({ message: "Server error", error: error.message });
  }
};

const getRecommendedJobsByAppliedJobs = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    // L·∫•y danh s√°ch c√°c c√¥ng vi·ªác ƒë√£ ·ª©ng tuy·ªÉn
    const appliedJobs = await Application.findAll({
      where: { candidate_id: userId },
      attributes: ["job_id"],
    });

    const appliedJobIds = [...new Set(appliedJobs.map((a) => a.job_id))];

    if (appliedJobIds.length === 0) {
      return res.status(200).json([]);
    }

    // L·∫•y m√¥ t·∫£ c√°c c√¥ng vi·ªác ƒë√£ ·ª©ng tuy·ªÉn (d√πng ƒë·ªÉ t√≠nh TF-IDF)
    const appliedJobDescriptions = await Promise.all(
      appliedJobIds.map(async (id) => {
        const job = await Job.findByPk(id);
        if (!job) return "";
        return [extractMainJobTitle(job.title), job.description].filter(Boolean).join(" ");
      })
    );

    // L·∫•y t·∫•t c·∫£ job ƒë√£ duy·ªát
    const allJobs = await Job.findAll({
      where: { approval_status: "Approved" },
      include: [
        { model: Company, as: "company", attributes: ["name", "logo"] },
        { model: User, as: "recruiter", attributes: ["full_name"] },
      ],
      order: [["createdAt", "DESC"]],
    });

    // L·ªçc ra c√°c job ch∆∞a ·ª©ng tuy·ªÉn
    const unsavedJobs = allJobs.filter(job => !appliedJobIds.includes(job.id));

    // Lo·∫°i b·ªè tr√πng l·∫∑p m√¥ t·∫£
    const textMap = new Map();
    const filteredJobs = [];
    for (const job of unsavedJobs) {
      const jobText = [extractMainJobTitle(job.title), job.description].filter(Boolean).join(" ");
      if (!textMap.has(jobText)) {
        textMap.set(jobText, true);
        filteredJobs.push({ job, jobText: preprocess(jobTextRaw) });
      }
    }

    // T√≠nh ƒëi·ªÉm TF-IDF cho c√°c job ch∆∞a ·ª©ng tuy·ªÉn
    const jobScores = await Promise.all(
      filteredJobs.map(async ({ job, jobText }) => {
        const tfidfScore = getTfidfScoreRecruiter(jobText, appliedJobDescriptions);
        return { job, score: tfidfScore };
      })
    );

    // L·ªçc v√† s·∫Øp x·∫øp theo score gi·∫£m d·∫ßn
    const recommendedJobs = jobScores
      .filter(item => item && item.score >= 2.4)
      .sort((a, b) => b.score - a.score)
      .slice(0, 10)
      .map(item => item.job);

    // Format d·ªØ li·ªáu tr·∫£ v·ªÅ
    const formattedJobs = recommendedJobs.map((job) => ({
      id: job.id,
      title: job.title,
      description: job.description,
      salary_range: job.salary_range,
      work_location: job.work_location,
      deadline: job.deadline,
      company: job.company,
      recruiter: job.recruiter,
    }));

    return res.status(200).json(formattedJobs);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y recommended jobs theo ·ª©ng tuy·ªÉn:", error);
    return res.status(500).json({ message: "Server error", error: error.message });
  }
};
module.exports = {
  createJob,
  updateJob,
  getAllJobsByRecruiter,
  getAllJobsByCandidate,
  getJobDetailByCandidate,
  getJobsByAdmin,
  getJobDetailByAdmin,
  approveJob,
  rejectJob,
  getRecommendedJobsByCandidate,
  getRecommendedJobsByAppliedJobs
};
